
import os
import re
import numpy as np


#####################################################################
# 1) Hardcode your entire map text EXACTLY, with no truncation.
#####################################################################


very_easy_maps = [
        # Classic direct path
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0, 1, 1],
            [1, 1, 0, 5, 2, 0, 1, 1],
            [1, 1, 0, 0, 0, 3, 1, 1],
            [1, 1, 0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Box already on target
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 0, 0, 0, 0, 1],
            [1, 0, 0, 4, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Short path right
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 2, 3, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Short path left
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 3, 2, 5, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Short path up
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 3, 0, 0, 0, 1],
            [1, 0, 0, 2, 0, 0, 0, 1],
            [1, 0, 0, 5, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Short path down
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 5, 0, 0, 0, 1],
            [1, 0, 0, 2, 0, 0, 0, 1],
            [1, 0, 0, 3, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Diagonal path
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 0, 0, 0, 0, 1],
            [1, 0, 0, 2, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 3, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Box close to target
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 5, 0, 0, 0, 1],
            [1, 0, 0, 0, 2, 3, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Player starts far from box
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 5, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 2, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 3, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Box in corner needs to be pulled out
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 2, 5, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 3, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Long straight path
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 0, 0, 0, 0, 1],
            [1, 0, 2, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 3, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Player needs to go around the box
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 2, 0, 0, 0, 3, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Open space
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 5, 2, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 3, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Player starts at edge
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 5, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 2, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 3, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Target at edge
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 3, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 2, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Target near wall
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 2, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 3, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # S-shaped path
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 5, 0, 0, 0, 0, 1],
            [1, 0, 2, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 3, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Box in a small room
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0, 1, 1],
            [1, 1, 0, 2, 0, 0, 1, 1],
            [1, 1, 0, 5, 0, 0, 1, 1],
            [1, 1, 0, 0, 0, 3, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Box in middle, player at corner, target at opposite corner
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 5, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 2, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 0, 0, 0, 0, 3, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ]),
        # Tight space for maneuvering
        np.array([
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 5, 0, 0, 0, 1, 1],
            [1, 1, 0, 2, 0, 0, 1, 1],
            [1, 1, 0, 0, 0, 0, 1, 1],
            [1, 1, 0, 0, 0, 3, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1]
        ])
    ]

# Easy maps (two boxes, simple layout)
# Easy maps (1-2 boxes with simple layouts and minimal obstacles)
easy_maps = [
    # Two boxes side by side
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 3, 0, 0, 3, 1, 1],
        [1, 1, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 2, 2, 0, 1, 1],
        [1, 1, 0, 0, 5, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # One box with slight obstacle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 5, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes separated
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 5, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 2, 0, 1],
        [1, 0, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes side by side with targets side by side
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 3, 3, 0, 1],
        [1, 0, 0, 0, 0, 0, 5, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple L shape
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 3, 0, 0, 5, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes in corners
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 5, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 2, 1]
    ]),
    # One box on target, one not
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 4, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 3, 0, 1],
        [1, 0, 0, 0, 5, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes in a row
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 3, 3, 0, 0, 1],
        [1, 0, 0, 0, 5, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # L shape with obstacles
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 0, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 3, 0, 1],
        [1, 0, 5, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple maze with one box
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 5, 2, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two targets on opposite sides
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 0, 0, 1],
        [1, 0, 0, 5, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes stacked vertically
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 5, 0, 3, 3, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box against wall, needs to be pulled out
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 2, 0, 0, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes diagonal
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 3, 0, 0, 3, 5, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple room with two boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 2, 2, 0, 1, 1],
        [1, 1, 0, 0, 5, 0, 1, 1],
        [1, 1, 0, 3, 3, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple T shape
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 3, 5, 3, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple obstacles and two boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 5, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes in zigzag pattern
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 2, 0, 0, 1],
        [1, 0, 3, 0, 0, 3, 0, 1],
        [1, 0, 0, 0, 0, 0, 5, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Player in the middle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 5, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 2, 0, 1],
        [1, 0, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box already on target, one to go
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 4, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 2, 0, 1],
        [1, 0, 0, 0, 5, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ])
]
# Easy-Medium transition maps (slightly more complex but not full medium)
# Easy-Medium transition maps (slightly more complex but not full medium)
easy_medium_maps = [
    # Two boxes with minimal obstacles
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 3, 1],
        [1, 0, 5, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # One box with more navigation
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 3, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Map requiring going around obstacle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 5, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Simple maze with two boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 3, 0, 1],
        [1, 0, 1, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 5, 2, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two boxes with wall separation
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 2, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Corridor navigation
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 3, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two rooms connected
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 5, 0, 1, 2, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 1, 1, 0, 1, 0, 0, 1],
        [1, 3, 3, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Central obstacle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 3, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 5, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # L-shaped corridor
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 3, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 0, 1],
        [1, 5, 2, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box in corner, needs careful maneuvering
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Need to move one box first
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 5, 2, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 3, 3, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Zigzag path
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 1, 2, 1, 1, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Corner navigation
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 0, 1, 0, 1, 1, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 1, 1],
        [1, 5, 2, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box near target but needs to go around
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 1, 3, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 5, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Need to navigate through maze
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1],
        [1, 5, 2, 0, 0, 3, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two different paths
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 3, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 0, 1],
        [1, 5, 2, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Need to pull box away from wall
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 5, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Player and target on opposite sides
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Need to plan steps for two boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 2, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 2, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Two paths with obstacles
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ])
]

# Medium maps (more boxes and obstacles)
# Medium maps (more boxes and obstacles)
medium_maps = [
    # Two boxes with more obstacles
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 1, 0, 2, 1, 0, 1],
        [1, 3, 1, 0, 0, 0, 5, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Three boxes in semi-open space
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 3, 0, 0, 0, 0, 1],
        [1, 3, 0, 0, 1, 1, 0, 1],
        [1, 0, 1, 2, 0, 0, 0, 1],
        [1, 0, 1, 0, 2, 1, 0, 1],
        [1, 0, 0, 0, 2, 0, 5, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box locked between walls
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 0, 0, 1],
        [1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 2, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Maze with three boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 3, 1, 0, 1, 2, 0, 1],
        [1, 0, 1, 0, 2, 0, 0, 1],
        [1, 5, 0, 0, 0, 2, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Boxes need to be moved in sequence
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 2, 2, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 5, 3, 3, 3, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Complex navigation
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 3, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 2, 1, 1, 0, 1],
        [1, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 5, 2, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Three boxes in different areas
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 1, 0, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 1, 2, 0, 1],
        [1, 3, 0, 0, 0, 0, 2, 1],
        [1, 0, 0, 5, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # L-shaped room with multiple boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 3, 0, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 1, 2, 2, 2, 0, 0, 1],
        [1, 5, 0, 0, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Targets in corners
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 2, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1],
        [1, 3, 0, 0, 5, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Narrow passages
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 1, 0, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 1, 0, 0, 1],
        [1, 5, 0, 0, 0, 2, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Split rooms
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 1, 3, 0, 3, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 2, 0, 1],
        [1, 0, 0, 1, 0, 0, 2, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Multiple pathways
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 1, 0, 1],
        [1, 2, 1, 0, 0, 0, 0, 1],
        [1, 5, 0, 2, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Zigzag with three boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 1, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 2, 0, 1],
        [1, 1, 1, 0, 0, 0, 0, 1],
        [1, 5, 3, 0, 0, 3, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Box blocking another box
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 3, 1, 0, 0, 1],
        [1, 5, 3, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Tight spaces
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 2, 1, 2, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 1, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Boxes in a row
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 2, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 3, 3, 3, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Multi-room puzzle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 1, 3, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 0, 1, 0, 0, 1, 1],
        [1, 3, 2, 0, 1, 2, 0, 1],
        [1, 0, 0, 0, 0, 0, 5, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Challenging box arrangement
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 2, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 0, 0, 0, 1],
        [1, 5, 3, 3, 3, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Complex obstacle course
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 2, 0, 1],
        [1, 0, 0, 2, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Non-trivial solution path
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 2, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ])
]

# Hard maps (complex layouts, multiple boxes, potential deadlocks)
hard_maps = [
    # Multiple boxes with corridors
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 3, 3, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 2, 0, 1],
        [1, 0, 1, 1, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Boxes that need careful sequencing
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 2, 0, 0, 1],
        [1, 0, 0, 1, 0, 1, 0, 1],
        [1, 1, 0, 1, 0, 0, 0, 1],
        [1, 3, 0, 0, 2, 1, 0, 1],
        [1, 3, 3, 0, 5, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Four boxes in complex layout
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 3, 0, 1, 0, 0, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 1, 2, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 0, 1, 2, 0, 1],
        [1, 5, 0, 0, 0, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Tight spaces with multiple boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 2, 0, 1],
        [1, 1, 0, 2, 2, 0, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 0, 0, 5, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Complex maze with boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 2, 1, 2, 0, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 1, 1],
        [1, 5, 0, 0, 2, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Multi-stage puzzle
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 1, 3, 0, 3, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 2, 0, 2, 1, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1],
        [1, 0, 0, 1, 0, 2, 0, 1],
        [1, 5, 0, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Potential deadlock situations
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 2, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 5, 3, 3, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Boxes that must be moved in correct order
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 5, 0, 3, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Long path with obstacles
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 1, 0, 1],
        [1, 0, 2, 0, 0, 0, 3, 1],
        [1, 1, 1, 0, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Multiple chambers
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 1, 0, 0, 3, 1],
        [1, 0, 2, 0, 0, 2, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 0, 2, 3, 1],
        [1, 0, 0, 0, 5, 1, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Complex decision points
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 3, 0, 2, 0, 2, 3, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 2, 0, 1, 0, 0, 1],
        [1, 5, 3, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Multiple narrow passages
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 2, 0, 0, 3, 1],
        [1, 0, 0, 2, 0, 1, 0, 1],
        [1, 1, 1, 0, 1, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 0, 1],
        [1, 5, 0, 2, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Sequential moves required
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 2, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 1, 0, 0, 0, 1, 0, 1],
        [1, 5, 0, 0, 3, 3, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Boxes in awkward positions
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 2, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 5, 3, 3, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Grid-like maze
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 1, 0, 3, 0, 1],
        [1, 0, 1, 0, 1, 0, 1, 1],
        [1, 0, 0, 2, 0, 2, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 1],
        [1, 0, 2, 0, 1, 0, 0, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Twisted corridor with boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 3, 1, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1],
        [1, 2, 1, 1, 0, 1, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 5, 0, 0, 2, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Need to clear path first
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 2, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 3, 3, 3, 0, 1],
        [1, 5, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Diagonal target placement
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 2, 2, 0, 0, 1],
        [1, 0, 0, 2, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 3, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Interlocked boxes
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 2, 0, 0, 0, 1],
        [1, 0, 2, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 5, 3, 3, 3, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ]),
    # Circular path required
    np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 0, 0, 0, 0, 3, 1],
        [1, 0, 0, 0, 1, 1, 0, 1],
        [1, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 1, 2, 0, 1, 0, 1],
        [1, 0, 0, 2, 2, 1, 0, 1],
        [1, 5, 0, 0, 0, 0, 3, 1],
        [1, 1, 1, 1, 1, 1, 1, 1]
    ])
]

#############################################################################
# 2) Dictionary mapping set names to numeric file codes
#############################################################################

set_mapping = {
    "very_easy_maps": 1,
    "easy_maps": 2,
    "easy_medium_maps": 3,
    "medium_maps": 4,
    "hard_maps": 5
}


#############################################################################
# 3) Put all map-lists in a single dictionary
#############################################################################

all_sets = {
    "very_easy_maps": very_easy_maps,
    "easy_maps": easy_maps,
    "easy_medium_maps": easy_medium_maps,
    "medium_maps": medium_maps,
    "hard_maps": hard_maps
}


#############################################################################
# 4) Numeric code → ASCII char mapping for DeepMind Sokoban
#############################################################################

tile_mapping = {
    0: " ",
    1: "#",
    2: "$",
    3: ".",
    4: "*",
    5: "@"
}


#############################################################################
# 5) Helper function to convert each NxN map to (N+2)x(N+2) with a wall border
#############################################################################

def convert_map_to_padded_ascii(map_2d):
    """
    Takes an NxN numpy array, pads it with walls (#) to produce (N+2)x(N+2),
    and converts numeric codes to Sokoban ASCII.
    Returns a list of strings.
    """
    n = map_2d.shape[0]
    # Create (n+2)x(n+2) all walls
    big_map = [["#" for _ in range(n+2)] for _ in range(n+2)]
    
    # Fill in the center with mapped characters
    for r in range(n):
        for c in range(n):
            code = map_2d[r, c]
            char = tile_mapping.get(code, "?")
            big_map[r+1][c+1] = char
    
    # Convert each row list to a string
    return ["".join(row) for row in big_map]


#############################################################################
# 6) Main logic: for each set, create a single file with all its maps
#############################################################################

parent_dir = os.path.dirname(os.path.realpath(__file__))

def main():
    # Create top-level folder (if it doesn't exist)
    cache_path = parent_dir + "/sokoban_cache/"
    base_folder = cache_path + "/Curriculum-levels"
    os.makedirs(cache_path, exist_ok=True)
    os.makedirs(base_folder, exist_ok=True)
    
    # For each map set, open exactly one file (e.g. "1.txt") 
    # and write all puzzles from that set into it
    for set_name, maps_list in all_sets.items():
        file_id = set_mapping[set_name]  # e.g. 1 for "very_easy_maps"
        output_path = os.path.join(base_folder, f"{file_id}.txt")
        
        with open(output_path, "w") as f_out:
            for i, arr in enumerate(maps_list):
                # Convert the map to ASCII
                ascii_lines = convert_map_to_padded_ascii(arr)
                
                # Write the puzzle index (e.g. "; 0")
                f_out.write(f"; {i}\n")
                # Write the board
                for line in ascii_lines:
                    f_out.write(line + "\n")
                # Blank line after each puzzle (optional)
                f_out.write("\n")
    
    print("Done! Check the 'Curriculum-levels' folder for 1.txt through 5.txt, each containing all puzzles of that level.")


if __name__ == "__main__":
    main()

